@using DungeonSlayers.Extensions
@using DungeonSlayers.Models
@using DungeonSlayers.Repositories
@using Newtonsoft.Json
@model DungeonSlayers.Models.Character

@{
    ViewBag.Title = "Edit - Character";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Navbar {
    <li><button class="btn btn-primary navbar-btn" type="submit" value="Create"  data-bind="click: save">Save</button></li>
   
    <li><button class="btn btn-danger navbar-btn" onclick="location.href='@Url.Action("Index")';return false;" >Back</button></li>
    @*<li>@Html.ActionLink("Back", "Index", null, new { @class = "btn btn-danger navbar-btn" })</li>*@
    
}

<form> @*data-bind="submit: save"*@
    @*@using (Html.BeginForm())*@
    @*{*@
    @Html.AntiForgeryToken()


    <div class="form-vertical">
        <div class="row">
            <div class="col-sm-6"><h3>Edit - Character</h3></div>
            @*<div id ="action-spaceholder" class="col-sm-6 pull-down ">
                <div class="float-me" data-spaceholder="action-spaceholder">
                    <div class="btn-toolbar pull-right">
                        <button type="submit" value="Create" class="btn btn-primary">Save</button>
                        @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-danger" })
                    </div>
                </div>
            </div>*@
        </div>
        </div>
        <div class="row" ><hr /></div>
        @*<div id="feedback" class="row">
            <div class="float-me" data-spaceholder="feedback">
                <div id="success" style="color:green">
                </div>
                <div id="error" style="color:red">
                    @Html.ValidationSummary()
                </div>
            </div>
        </div>*@
        @*<div class="btn-group btn-lg">*@
        @*</div>*@
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.Partial("~/Views/Shared/_CharacterHeaderPartial.cshtml", Model)

        @Html.Partial("~/Views/Shared/_AttributesTraitsPartial.cshtml", Model)

        @Html.Partial("~/Views/Shared/_CombatValuesPartial.cshtml", Model)

        <div class="row">
            <div class="col-sm-12 col-md-7">
                @Html.Partial("~/Views/Shared/_WeaponsPartial.cshtml", Model)
            </div>
            <div class="col-sm-12 col-md-5">
                @Html.Partial("~/Views/Shared/_ArmorPartial.cshtml", Model)
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                @Html.Partial("~/Views/Shared/_SpellPartial.cshtml", Model)
            </div>
        </div>
        <div class="row" style="font-size:smaller;">
            <div class="col-sm-12 col-md-6">
                @Html.Partial("~/Views/Shared/_PPRecordPartial.cshtml", Model)
            </div>

            <div class="col-sm-12 col-md-6">
                @Html.Partial("~/Views/Shared/_GoldPartial.cshtml",Model)
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-6">
                @Html.Partial("~/Views/Shared/_EquipmentPartial.cshtml",Model)
            </div>
            <div class="col-sm-12 col-md-6">
                @Html.Partial("~/Views/Shared/_MagicEquipmentPartial.cshtml", Model)
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-6">
                @Html.Partial("~/Views/Shared/_TalentPartial.cshtml", Model)
            </div>
            <div class="col-sm-12 col-md-6">
                @Html.Partial("~/Views/Shared/_CheckPartial.cshtml", Model)
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-6">
                @Html.Partial("~/Views/Shared/_CharacteristicsPartial.cshtml", Model)
            </div>
        </div>
    </div>
    @*}*@
</form>

@section Scripts {
    <script type="text/javascript">

        $(function () {

            var jsonModel = '@Html.Raw(JsonConvert.SerializeObject(this.Model, Formatting.None, new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            }))';
            var Model = ko.mapping.fromJSON(jsonModel, { copy: ["_destroy","RacialAbilities"] });
            Model.RacialAbilities = ko.observableArray(Model.RacialAbilities);

            var antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();
            if (antiForgeryToken) {
                Model.__RequestVerificationToken = antiForgeryToken;
            }

            Model.AV = ko.computed(function () {
                var av = 0;
                for (var i in Model.Armors()) {
                    var armor = Model.Armors()[i];
                    if (armor.Equipped()) {
                        av += armor.Armor.AV();
                    }
                }
                return av;
            }, this);

            Model.SM = ko.computed(function () {
                return 0;
            }, this);

            Model.WB = ko.computed(function () {
                return 0;
            }, this);

            var jsonCombatProperties = '@Html.Raw(JsonConvert.SerializeObject(((IEnumerable<PropertyDef>)this.ViewBag.PropertyDefs).CombatValues()))';

            @foreach(var def in ((IEnumerable<PropertyDef>)this.ViewBag.PropertyDefs).CombatValues())
            {
                @Html.Raw("Model." + def.Acronym+ " = ko.pureComputed(function() {\n" +
                    "    return "+def.DataBinding+";\n"+
               "}, this);\n")
            }
            var racials = JSON.parse('@Html.Raw(JsonConvert.SerializeObject((IEnumerable<RacialAbility>)this.ViewBag.RacialAbilities))');
            //for (i in racials) {
            //    racials[i]._new = true;
            //}
            Model.racialChoices = ko.observableArray(racials);
            Model.initializeRacialSelectPicker = function () {
                var ras = Model.RacialAbilities.removeAll();
                for (var i in ras) {
                    var ra = ras[i];
                    var raFromChoices = Model.racialChoices().filter(function (rc) { return rc.Id == ra.Id })[0];
                    //raFromChoices._new = false;
                    Model.RacialAbilities.push(raFromChoices);
                    //$('[name=RacialAbilities] option').filter(function () { return ($(this).text() == ra.Name()); }).prop('selected', true);
                }


                $('.search-choice:contains(-)').addClass('search-choice-neg');
                $('.search-choice:contains(+)').addClass('search-choice-pos');

                //$('.chosen-container').click(function (e) {
                //    $('.search-choice:contains(-)').addClass('search-choice-neg');
                //    $('.search-choice:contains(+)').addClass('search-choice-pos');
                //});


                //Model.RacialAbilities(Model.RacialAbilities());
            }
            Model.updateRacialSelectPicker = function(option, item){
                //$(".chosen-select").chosen();
                //$("#RacialAbilities").selectpicker('refresh');

            }
            //Model.RacialAbilityIds = $.Enumerable.From(model.RacialAbilities()).Select(function (ra) { return ra.Id() }).TojQuery();
            var weapons = JSON.parse('@Html.Raw(JsonConvert.SerializeObject((IEnumerable<Weapon>)this.ViewBag.Weapons))');
            var armors = JSON.parse('@Html.Raw(JsonConvert.SerializeObject((IEnumerable<Armor>)this.ViewBag.Armors))');
            var spells = JSON.parse('@Html.Raw(JsonConvert.SerializeObject((IEnumerable<Spell>)this.ViewBag.Spells))');
            var equipments = JSON.parse('@Html.Raw(JsonConvert.SerializeObject((IEnumerable<Equipment>)this.ViewBag.Equipments))');


            @foreach (string Self in (IEnumerable<string>)this.ViewBag.SelfTypes)
            {
                var self = Self.ToLower();
                //
                @Html.Raw($@"Model.update{Self} = function(id) {{
                    {self} = $.grep({self}s, function(e) {{ return e.Id == id; }});
                    if ({self})
                    {{
                        ko.mapping.fromJS({self}[0], {{ }}, this.{Self});
                    }}
                }}
                Model.add{Self} = function() {{
                    {self} = {self}s[0];
                    {self}Id = ko.observable({self}.Id);
                    wc = {{ CharacterId: Model.Id, {Self}Id: {self}Id, {Self}: ko.mapping.fromJS({self}), Equipped: ko.observable(false), Quantity: ko.observable(1), Location: ko.observable(''), _new:  true }}
                    {self}Id.subscribe(Model.update{Self}, wc);
                    Model.{Self}s.push(wc);
                    $('#{self}Table select').selectpicker('refresh');
                }}
                Model.remove{Self} = function({self}) {{
                    Model.{Self}s.remove({self});
                    //Model.{Self}s.destroy({self});
                }}
                Model.switchTo{Self} = function({self}) {{
                    for (var i in Model.{Self}s()) {{
                        Model.{Self}s()[i].Equipped(false);
                    }}
                    {self}.Equipped(true);
                }}
                for (i in Model.{Self}s()) {{
                    wc = Model.{Self}s()[i];
                    wc.{Self}Id.subscribe(Model.update{Self}, wc);
                }}");
                //
            }
            //

            //Model.updateWeapon = function (id) {
            //    weapon = $.grep(weapons, function (e) { return e.Id == id; });
            //    if (weapon) {
            //        ko.mapping.fromJS(weapon[0], {}, this.Weapon);
            //    }
            //}
            //Model.addWeapon = function () {
            //    weapon = weapons[0];
            //    weaponId = ko.observable(weapon.Id);
            //    wc = { CharacterId: Model.Id, WeaponId: weaponId, Weapon: ko.mapping.fromJS(weapon) }
            //    weaponId.subscribe(Model.updateWeapon, wc);
            //    Model.Weapons.push(wc);
            //    $('#weaponTable select').selectpicker('refresh');
            //}
            //Model.removeWeapon = function (weapon) {
            //    Model.Weapons.remove(weapon);
            //}
            //for (i in Model.Weapons()) {
            //    wc = Model.Weapons()[i];
            //    wc.WeaponId.subscribe(Model.updateWeapon, wc);
            //}
            Model.save = function () {
                //ko.utils.postJson(location.href, { character: ko.toJSON(Model) });
                $.ajax({
                    url: '/Characters/Edit',
                    type: 'POST',
                    data: ko.toJSON(Model),
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        $("#success").text("Character Save Successful").fadeIn(0).delay(3000).fadeOut(1000);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        $('#error').text("Character Save Fails (" + xhr.status + ") - " + xhr.responseText).fadeIn(0).delay(10000).fadeOut(1000);

                    }
                });
            }

            ko.applyBindings(Model);
            

            Model.initializeRacialSelectPicker();

        });
    </script>
}
